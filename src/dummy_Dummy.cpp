/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Dummy
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "dummy/dummy.h"

using namespace dummy;

/** ~Dummy()
 * 
 */
static int Dummy__Dummy(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "dummy.Dummy"));
    if (userdata->gc) {
      Dummy *self = (Dummy *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~Dummy: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~Dummy: Unknown exception");
  }
  return dub_error(L);
}

/** dummy::Dummy::Dummy()
 * include/dummy/dummy.h:43
 */
static int Dummy_Dummy(lua_State *L) {
  try {
    Dummy *retval__ = new Dummy();
    retval__->pushobject(L, retval__, "dummy.Dummy", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Dummy: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Dummy: Unknown exception");
  }
  return dub_error(L);
}

/** float dummy::Dummy::callback(const char *func, float value)
 * include/dummy/dummy.h:47
 */
static int Dummy_callback(lua_State *L) {
  try {
    Dummy *self = *((Dummy **)dub_checksdata(L, 1, "dummy.Dummy"));
    const char *func = dub_checkstring(L, 2);
    float value = dub_checknumber(L, 3);
    lua_pushnumber(L, self->callback(func, value));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "callback: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "callback: Unknown exception");
  }
  return dub_error(L);
}

/** float dummy::Dummy::addSomething(float value)
 * include/dummy/dummy.h:64
 */
static int Dummy_addSomething(lua_State *L) {
  try {
    Dummy *self = *((Dummy **)dub_checksdata(L, 1, "dummy.Dummy"));
    float value = dub_checknumber(L, 2);
    lua_pushnumber(L, self->addSomething(value));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addSomething: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addSomething: Unknown exception");
  }
  return dub_error(L);
}

/** static const char* dummy::Dummy::plat()
 * include/dummy/dummy.h:68
 */
static int Dummy_plat(lua_State *L) {
  try {
    lua_pushstring(L, Dummy::plat());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "plat: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "plat: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int Dummy___tostring(lua_State *L) {
  Dummy *self = *((Dummy **)dub_checksdata_n(L, 1, "dummy.Dummy"));
  lua_pushfstring(L, "dummy.Dummy: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Dummy_member_methods[] = {
  { "__gc"         , Dummy__Dummy         },
  { "new"          , Dummy_Dummy          },
  { "callback"     , Dummy_callback       },
  { "addSomething" , Dummy_addSomething   },
  { "plat"         , Dummy_plat           },
  { "__tostring"   , Dummy___tostring     },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_dummy_Dummy(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "dummy.Dummy");
  // <mt>

  // register member methods
  luaL_register(L, NULL, Dummy_member_methods);
  // save meta-table in dummy
  dub_register(L, "dummy", "Dummy_core", "Dummy");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
